#!/bin/bash

VERSION="1.0.6"
CONFIG_DIR="$HOME/.boogiewoogie"
CONFIG_FILE="$CONFIG_DIR/profiles.conf"
SSH_CONFIG_FILE="$HOME/.ssh/config"

# Create config directory if it doesn't exist
mkdir -p "$CONFIG_DIR"
touch "$CONFIG_FILE"

# Colors for output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

function show_help() {
    echo "BoogieWoogie - Git Profile Manager v${VERSION}"
    echo "Manage multiple Git profiles with SSH keys and SSH host aliases"
    echo
    echo "Usage:"
    echo "  $(basename "$0") add                     - Add a new Git profile (with SSH alias)"
    echo "  $(basename "$0") list                    - List all profiles"
    echo "  $(basename "$0") switch <profile-name>   - Switch to a specific profile"
    echo "  $(basename "$0") remove <profile-name>   - Remove a profile"
    echo "  $(basename "$0") current                 - Show current profile"
    echo "  $(basename "$0") version                 - Show version information"
    echo "  $(basename "$0") help                    - Show this help message"
    echo
    echo "When using multiple profiles for the same host (e.g., github.com), use the SSH alias in your Git remote URLs:"
    echo "  git@<host-alias>:username/repo.git"
    echo "Example: git@github-work:username/repo.git"
    exit 0
}

function show_version() {
    echo "BoogieWoogie v${VERSION}"
    exit 0
}

function add_profile() {
    echo "Adding a new Git profile"
    echo "----------------------"
    
    # Get profile details
    read -p "Enter profile name (e.g., personal, work): " profile_name
    read -p "Enter Git user name: " git_name
    read -p "Enter Git email: " git_email
    read -p "Enter Git host (e.g., github.com): " git_host
    read -p "Enter SSH host alias (e.g., github-${profile_name}) (default: ${git_host}-${profile_name}): " host_alias
    read -p "Enter SSH key path (default: $HOME/.ssh/id_ed25519_${profile_name}) (Optional): " ssh_key

    # Set default SSH key path if none provided
    ssh_key=${ssh_key:-"$HOME/.ssh/id_ed25519_${profile_name}"}
    # Set default host alias if none provided
    host_alias=${host_alias:-"${git_host}-${profile_name}"}

    # Check if profile already exists
    if grep -q "^${profile_name}:" "$CONFIG_FILE"; then
        echo "Error: Profile '${profile_name}' already exists!"
        exit 1
    fi

    # Check if host alias already exists
    if grep -q ":${host_alias}$" "$CONFIG_FILE"; then
        echo "Error: SSH host alias '${host_alias}' is already used by another profile!"
        exit 1
    fi

    # Save profile (now includes host_alias)
    echo "${profile_name}:${git_name}:${git_email}:${git_host}:${ssh_key}:${host_alias}" >> "$CONFIG_FILE"

    # Create alias suggestion
    alias_cmd="alias git-${profile_name}='boogiewoogie switch ${profile_name}'"

    echo -e "\n${GREEN}Profile '${profile_name}' added successfully!${NC}"
    echo -e "${BLUE}Add this to your ~/.bashrc or ~/.zshrc to create an alias:${NC}"
    echo "$alias_cmd"
    echo -e "${BLUE}When cloning or setting remotes, use: git@${host_alias}:username/repo.git${NC}"

    # Offer to generate SSH key if it doesn't exist
    if [ ! -f "$ssh_key" ]; then
        read -p "SSH key doesn't exist. Would you like to generate it now? (y/n): " generate_key
        if [[ $generate_key =~ ^[Yy]$ ]]; then
            ssh-keygen -t ed25519 -C "$git_email" -f "$ssh_key"
            echo -e "\n${BLUE}Add this public key to your Git host ($git_host):${NC}"
            cat "${ssh_key}.pub"
        fi
    fi
}

function list_profiles() {
    echo "Available Git Profiles"
    echo "--------------------"
    if [ ! -s "$CONFIG_FILE" ]; then
        echo "No profiles found. Add one using: $(basename "$0") add"
        exit 0
    fi
    
    current_name=$(git config --global user.name)
    current_email=$(git config --global user.email)
    
    while IFS=: read -r name full_name email host key host_alias; do
        if [ -n "$name" ]; then
            if [ "$full_name" = "$current_name" ] && [ "$email" = "$current_email" ]; then
                echo -e "${GREEN}* ${name}${NC} (${full_name} <${email}>) - ${host} [alias: ${host_alias}]"
            else
                echo "  ${name} (${full_name} <${email}>) - ${host} [alias: ${host_alias}]"
            fi
        fi
    done < "$CONFIG_FILE"
}

function switch_profile() {
    profile_name="$1"
    
    if [ -z "$profile_name" ]; then
        echo "Error: Profile name required"
        echo "Usage: $(basename "$0") switch <profile-name>"
        exit 1
    fi
    
    # Find profile in config
    profile_line=$(grep "^${profile_name}:" "$CONFIG_FILE")

    if [ -z "$profile_line" ]; then
        echo "Error: Profile '${profile_name}' not found!"
        exit 1
    fi

    # Parse profile data
    IFS=: read -r name full_name email host key host_alias <<< "$profile_line"

    # Update Git config
    git config --global user.name "$full_name"
    git config --global user.email "$email"

    # Update SSH config
    update_ssh_config

    # Restart SSH agent with new key
    echo "Updating SSH agent..."
    if ! ssh-add -D >/dev/null 2>&1; then
        echo "Warning: Failed to remove identities from SSH agent"
    fi

    if ! eval "$(ssh-agent -s)" >/dev/null 2>&1; then
        echo "Error: Failed to start SSH agent"
        exit 1
    fi

    # Verify the values were set correctly
    current_name=$(git config --global user.name)
    current_email=$(git config --global user.email)

    echo -e "${GREEN}‚úÖ Switched to profile: ${profile_name}${NC}"
    echo "üîê Name: ${current_name}"
    echo "üìß Email: ${current_email}"
    echo "üåê SSH Host Alias: ${host_alias} (use in remote URLs)"

    # Verify Git host connection using alias
    echo -e "\nTesting connection to ${host} via alias ${host_alias}..."
    if ! ssh -T "git@${host_alias}" 2>&1 | grep -q "success"; then
        echo -e "‚úÖ Successfully connected to ${host} via ${host_alias}${NC}"
        echo -e "${BLUE}Note: If this is your first time connecting to ${host}, you may need to verify the host key${NC}"
    fi
}

function update_ssh_config() {
    # Ensure SSH directory exists with proper permissions
    if [ ! -d "$HOME/.ssh" ]; then
        mkdir -p "$HOME/.ssh"
        chmod 700 "$HOME/.ssh"
        echo "Created SSH directory with secure permissions"
    fi

    # Ensure SSH config exists
    if [ ! -f "$SSH_CONFIG_FILE" ]; then
        touch "$SSH_CONFIG_FILE"
        chmod 600 "$SSH_CONFIG_FILE"
        echo "Created SSH config file with secure permissions"
    fi

    # Backup existing SSH config if it exists and has content
    if [ -s "$SSH_CONFIG_FILE" ]; then
        backup_file="${SSH_CONFIG_FILE}.$(date +%Y%m%d_%H%M%S).bak"
        cp "$SSH_CONFIG_FILE" "$backup_file"
        chmod 600 "$backup_file"
        echo "üìë Backed up existing SSH config to: $backup_file"
    fi
    
    # Create SSH config header
    cat > "$SSH_CONFIG_FILE" <<EOF
# Generated by boogiewoogie
# Last updated: $(date)
# WARNING: This file is automatically managed by boogiewoogie.
# Manual changes may be overwritten.

EOF
    
    # Add each profile's SSH config
    while IFS=: read -r name full_name email host key host_alias; do
        if [ -n "$name" ]; then
            cat >> "$SSH_CONFIG_FILE" <<EOF
Host $host_alias
    HostName $host
    User git
    IdentityFile $key
    IdentitiesOnly yes

EOF
        fi
    done < "$CONFIG_FILE"
    
    chmod 600 "$SSH_CONFIG_FILE"
    echo "üîß Updated SSH config at: $SSH_CONFIG_FILE"
    
    # Verify the config file was written correctly
    if [ ! -s "$SSH_CONFIG_FILE" ]; then
        echo "Error: Failed to write SSH config file"
        exit 1
    fi
}

function remove_profile() {
    profile_name="$1"
    
    if [ -z "$profile_name" ]; then
        echo "Error: Profile name required"
        echo "Usage: $(basename "$0") remove <profile-name>"
        exit 1
    fi
    
    if grep -q "^${profile_name}:" "$CONFIG_FILE"; then
        sed -i .bak "/^${profile_name}:/d" "$CONFIG_FILE"
        echo -e "${GREEN}Profile '${profile_name}' removed successfully!${NC}"
        update_ssh_config
    else
        echo "Error: Profile '${profile_name}' not found!"
        exit 1
    fi
}

function show_current() {
    current_name=$(git config --global user.name)
    current_email=$(git config --global user.email)
    
    if [ -z "$current_name" ] || [ -z "$current_email" ]; then
        echo "No Git profile is currently set"
        exit 0
    fi
    
    while IFS=: read -r name full_name email host key host_alias; do
        if [ "$full_name" = "$current_name" ] && [ "$email" = "$current_email" ]; then
            echo -e "${GREEN}Current profile: ${name}${NC}"
            echo "üîê Name: $full_name"
            echo "üìß Email: $email"
            echo "üåê Host: $host"
            echo "üîë SSH Key: $key"
            echo "üîó SSH Host Alias: $host_alias"
            exit 0
        fi
    done < "$CONFIG_FILE"
    
    echo "Current Git config:"
    echo "Name: $current_name"
    echo "Email: $current_email"
    echo "(This configuration doesn't match any saved profile)"
}

function _generate_completions() {
    case "$1" in
        "bash")
            cat <<EOF
_boogiewoogie_completions()
{
    local cur prev opts
    COMPREPLY=()
    cur="\${COMP_WORDS[COMP_CWORD]}"
    prev="\${COMP_WORDS[COMP_CWORD-1]}"
    opts="add list switch remove current version help"

    case "\${prev}" in
        switch|remove)
            local profiles=\$(grep -o '^[^:]*' "$CONFIG_FILE" 2>/dev/null)
            COMPREPLY=( \$(compgen -W "\${profiles}" -- \${cur}) )
            return 0
            ;;
        *)
            COMPREPLY=( \$(compgen -W "\${opts}" -- \${cur}) )
            return 0
            ;;
    esac
}
complete -F _boogiewoogie_completions boogiewoogie
EOF
            ;;
        "zsh")
            cat <<EOF
#compdef boogiewoogie

_boogiewoogie() {
    local -a commands
    commands=(
        'add:Add a new Git profile'
        'list:List all profiles'
        'switch:Switch to a specific profile'
        'remove:Remove a profile'
        'current:Show current profile'
        'version:Show version information'
        'help:Show help message'
    )

    _arguments -C \\
        '1: :->command' \\
        '*:: :->args'

    case \$state in
        command)
            _describe -t commands 'boogiewoogie commands' commands
            ;;
        args)
            case \$words[1] in
                switch|remove)
                    local -a profiles
                    profiles=(\$(grep -o '^[^:]*' "$CONFIG_FILE" 2>/dev/null))
                    _describe -t profiles 'profiles' profiles
                    ;;
            esac
            ;;
    esac
}

_boogiewoogie
EOF
            ;;
        "fish")
            cat <<EOF
complete -c boogiewoogie -f
complete -c boogiewoogie -n "__fish_use_subcommand" -a "add" -d "Add a new Git profile"
complete -c boogiewoogie -n "__fish_use_subcommand" -a "list" -d "List all profiles"
complete -c boogiewoogie -n "__fish_use_subcommand" -a "switch" -d "Switch to a specific profile"
complete -c boogiewoogie -n "__fish_use_subcommand" -a "remove" -d "Remove a profile"
complete -c boogiewoogie -n "__fish_use_subcommand" -a "current" -d "Show current profile"
complete -c boogiewoogie -n "__fish_use_subcommand" -a "version" -d "Show version information"
complete -c boogiewoogie -n "__fish_use_subcommand" -a "help" -d "Show help message"

function __boogiewoogie_profiles
    grep -o '^[^:]*' "$HOME/.boogiewoogie/profiles.conf" 2>/dev/null
end

complete -c boogiewoogie -n '__fish_seen_subcommand_from switch remove' -a "(__boogiewoogie_profiles)"
EOF
            ;;
    esac
}

# Handle completion generation
if [ "$1" = "completion" ]; then
    shell="${2:-bash}"
    _generate_completions "$shell"
    exit 0
fi

# Main command processing
case "$1" in
    "add")
        add_profile
        ;;
    "list")
        list_profiles
        ;;
    "switch")
        switch_profile "$2"
        ;;
    "remove")
        remove_profile "$2"
        ;;
    "current")
        show_current
        ;;
    "version")
        show_version
        ;;
    "help"|"--help"|"-h"|"")
        show_help
        ;;
    *)
        echo "Unknown command: $1"
        echo "Run '$(basename "$0") help' for usage information"
        exit 1
        ;;
esac 